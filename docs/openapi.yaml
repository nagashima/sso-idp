openapi: 3.0.3
info:
  title: RP Management API
  description: |
    RPサイト向けユーザー情報管理API

    このAPIは、複数のRP（Relying Party）サイトの会員情報をIdPで統合管理するためのものです。
    RPサーバーからサーバー間通信でユーザー情報を取得できます。

    ## 認証
    すべてのエンドポイントでBasic認証（client_id/client_secret）が必要です。

    ## セキュリティ
    - HTTPS必須
    - サーバー間通信のみ
    - IP制限あり
    - ブラウザからのアクセス不可（CORS制限）
  version: 1.0.0
  contact:
    name: IdP API Support
  license:
    name: Proprietary

servers:
  - url: https://localhost:4443/api/v1
    description: 開発環境
  - url: https://idp.example.com/api/v1
    description: 本番環境（実際のドメインに変更してください）

security:
  - basicAuth: []

tags:
  - name: users
    description: ユーザー情報管理

paths:
  /users/{id}:
    get:
      summary: ユーザーID指定取得
      description: 指定したユーザーIDの情報を取得します。
      operationId: getUserById
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: ユーザーID
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 123
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                success:
                  summary: ユーザー情報取得成功
                  value:
                    id: 123
                    email: user@example.com
                    name: 山田太郎
                    birth_date: "1990-01-01"
                    phone_number: "090-1234-5678"
                    address: 東京都渋谷区...
                    activated: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users:
    get:
      summary: ユーザー検索
      description: |
        メールアドレスまたは複数のユーザーIDを指定してユーザー情報を取得します。

        **レスポンスは常に配列形式です**。
        - `email`: 0〜1件の配列
        - `ids`: 0〜N件の配列
      operationId: searchUsers
      tags:
        - users
      parameters:
        - name: email
          in: query
          description: メールアドレス（完全一致）
          required: false
          schema:
            type: string
            format: email
          example: user@example.com
        - name: ids
          in: query
          description: ユーザーIDのカンマ区切りリスト
          required: false
          schema:
            type: string
            pattern: '^[0-9]+(,[0-9]+)*$'
          example: "1,2,3"
      responses:
        '200':
          description: 成功（常に配列形式）
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                emailSearch:
                  summary: メールアドレス検索（配列で1件）
                  value:
                    - id: 123
                      email: user@example.com
                      name: 山田太郎
                      birth_date: "1990-01-01"
                      phone_number: "090-1234-5678"
                      address: 東京都渋谷区...
                      activated: true
                emailNotFound:
                  summary: メールアドレス検索（該当なし）
                  value: []
                idsSearch:
                  summary: 複数ID検索（配列で複数件）
                  value:
                    - id: 1
                      email: user1@example.com
                      name: ユーザー1
                      birth_date: "1985-05-15"
                      phone_number: "090-1111-1111"
                      address: 東京都新宿区...
                      activated: true
                    - id: 2
                      email: user2@example.com
                      name: ユーザー2
                      birth_date: "1992-08-20"
                      phone_number: "090-2222-2222"
                      address: 大阪府大阪市...
                      activated: false
        '400':
          description: パラメータ不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingParameter:
                  summary: パラメータ未指定
                  value:
                    error: Missing parameter
                    message: email または ids パラメータが必要です
                invalidFormat:
                  summary: フォーマット不正
                  value:
                    error: Invalid parameter format
                    message: ids パラメータの形式が不正です
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: |
        Basic認証（client_id/client_secret）

        Authorization: Basic <Base64(client_id:client_secret)>

  schemas:
    User:
      type: object
      description: ユーザー情報
      required:
        - id
        - email
        - activated
      properties:
        id:
          type: integer
          format: int64
          description: ユーザーID
          example: 123
        email:
          type: string
          format: email
          description: メールアドレス
          example: user@example.com
        name:
          type: string
          nullable: true
          description: 氏名
          example: 山田太郎
        birth_date:
          type: string
          format: date
          nullable: true
          description: 生年月日
          example: "1990-01-01"
        phone_number:
          type: string
          nullable: true
          description: 電話番号
          example: "090-1234-5678"
        address:
          type: string
          nullable: true
          description: 住所
          example: 東京都渋谷区...
        activated:
          type: boolean
          description: アカウント有効化フラグ
          example: true

    Error:
      type: object
      description: エラーレスポンス
      required:
        - error
      properties:
        error:
          type: string
          description: エラーの種類
          example: User not found
        message:
          type: string
          description: エラーの詳細メッセージ（オプション）
          example: 指定されたユーザーIDは存在しません

  responses:
    Unauthorized:
      description: 認証失敗
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalidCredentials:
              summary: 認証情報が不正
              value:
                error: Invalid credentials
                message: client_id または client_secret が正しくありません
            inactiveClient:
              summary: クライアントが無効
              value:
                error: Client inactive
                message: このクライアントは無効化されています

    Forbidden:
      description: IP制限により拒否
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ipNotAllowed:
              summary: IPアドレスが許可されていない
              value:
                error: IP not allowed
                message: このIPアドレスからのアクセスは許可されていません

    NotFound:
      description: ユーザーが存在しない
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            userNotFound:
              summary: ユーザーが見つからない
              value:
                error: User not found
                message: 指定されたユーザーは存在しません
